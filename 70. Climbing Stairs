LeetCode 70. Climbing Stairs (Like Fibonacci)

(1) Recursion: TC: O(2^n), SC: O(n)

class Solution {
private:
    int func(int n){
        if(n==0 || n==1) return 1;

        return func(n-1) + func(n-2);
    }

public:
    int climbStairs(int n) {
        return func(n);
    }
};

(2) Memoization (Top Down): TC: O(n), SC: O(n)[dp vector] + O(n)[reecursion stack]

class Solution {
private:
    int func(int n, vector<int> &dp){
        if(n==0 || n==1) return 1;
        if(dp[n]!=-1) return dp[n];

        return dp[n] = func(n-1, dp) + func(n-2, dp);
    }

public:
    int climbStairs(int n) {
        vector<int> dp(n+1, -1);
        return func(n, dp);
    }
};

(3) Tabulation (Bottom Up): TC: O(n), SC: O(n)[dp vector]

class Solution {
public:
    int climbStairs(int n) {
        vector<int> dp(n+1, -1);
        dp[0]=dp[1]=1;
        for(int i=2;i<=n;i++){
            dp[i] = dp[i-1] + dp[i-2];
        }

        return dp[n];
    }
};

(4) Space Optimized: TC: O(n), SC: O(1)

class Solution {
public:
    int climbStairs(int n) {
        int prev=1, prev2=1, cur=0;
        for(int i=2;i<=n;i++){
            cur = prev + prev2;
            prev2 = prev;
            prev = cur;
        }

        return prev;
    }
};

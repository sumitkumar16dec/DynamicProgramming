LeetCode 746. Min Cost Climbing Stairs

(1) Recursion: TC: O(n^2), SC: O(n)
class Solution {
public:
    int func(int i, vector<int> &cost){
        if(i<0) return 0;
        if(i==0 || i==1) return cost[i];
        return cost[i] + min(func(i-1, cost), func(i-2, cost));
    }

    int minCostClimbingStairs(vector<int>& cost) {
        int n= cost.size();
        return min(func(n-1, cost), func(n-2, cost));
    }
};

(2) Memoization (Top Down): TC: O(n), SC: O(n)[dp vector] + O(n)[recursion stack space]
class Solution {
public:
    int func(int i, vector<int> &cost, vector<int> &dp){
        if(i<0) return 0;
        if(i==0 || i==1) return cost[i];
        if(dp[i]!=-1) return dp[i];

        return dp[i]= cost[i] + min(func(i-1, cost, dp), func(i-2, cost, dp));
    }

    int minCostClimbingStairs(vector<int>& cost) {
        int n= cost.size();
        vector<int> dp(n+1, -1);
        return min(func(n-1, cost, dp), func(n-2, cost, dp));
    }
};

(3) Tabulation (Bottom Up): TC: O(n), SC: O(n)[dp vector]
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n= cost.size();
        vector<int> dp(n+1, -1);
        dp[0]=cost[0]; dp[1]=cost[1];
        for(int i=2;i<n;i++){
            dp[i]= cost[i] + min(dp[i-1], dp[i-2]);
        }
        return min(dp[n-1], dp[n-2]);
    }
};

(4) Space Optimized Iteration: TC: O(n), SC: O(1)
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n= cost.size();
        int prev2=cost[0], prev=cost[1], cur=0;
        for(int i=2;i<n;i++){
            cur= cost[i] + min(prev, prev2);
            prev2= prev;
            prev= cur;
        }
        return min(prev, prev2);
    }
};
